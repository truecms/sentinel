"""Add API key authentication and RBAC tables

Revision ID: 4cfcd47c975d
Revises: f83633f2fa86
Create Date: 2025-07-17 11:06:03.991771

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4cfcd47c975d"
down_revision: Union[str, None] = "f83633f2fa86"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "module_versions",
        "is_security_update",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    op.alter_column(
        "module_versions",
        "release_notes",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.drop_constraint(op.f("modules_machine_name_key"), "modules", type_="unique")
    op.create_foreign_key(None, "organizations", "users", ["created_by"], ["id"])
    op.create_foreign_key(None, "organizations", "users", ["updated_by"], ["id"])
    op.drop_index(op.f("ix_sites_last_data_push"), table_name="sites")
    op.drop_index(op.f("ix_sites_last_drupal_org_check"), table_name="sites")
    op.drop_index(op.f("ix_sites_security_score"), table_name="sites")
    op.drop_constraint(op.f("sites_site_uuid_key"), "sites", type_="unique")

    # Create API Keys table
    op.create_table(
        "api_keys",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("key_hash", sa.String(length=255), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("site_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("last_used", sa.DateTime(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), default=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["sites.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_api_keys_key_hash"), "api_keys", ["key_hash"], unique=True)
    op.create_index(op.f("ix_api_keys_user_id"), "api_keys", ["user_id"], unique=False)
    op.create_index(op.f("ix_api_keys_site_id"), "api_keys", ["site_id"], unique=False)

    # Create Roles table
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("display_name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_system", sa.Boolean(), default=False, nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_roles_name"), "roles", ["name"], unique=True)

    # Create Permissions table
    op.create_table(
        "permissions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("resource", sa.String(length=50), nullable=False),
        sa.Column("action", sa.String(length=50), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_permissions_name"), "permissions", ["name"], unique=True)
    op.create_index(
        op.f("ix_permissions_resource"), "permissions", ["resource"], unique=False
    )

    # Create Role-Permissions junction table
    op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.Column("granted_by_id", sa.Integer(), nullable=True),
        sa.Column(
            "granted_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["granted_by_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )

    # Create User-Roles junction table
    op.create_table(
        "user_roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("organization_id", sa.Integer(), nullable=True),
        sa.Column(
            "valid_from", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True
        ),
        sa.Column("valid_until", sa.DateTime(), nullable=True),
        sa.Column("assigned_by_id", sa.Integer(), nullable=True),
        sa.Column(
            "assigned_at", sa.DateTime(), server_default=sa.text("NOW()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["assigned_by_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "role_id", "organization_id"),
    )
    op.create_index(
        op.f("ix_user_roles_user_id"), "user_roles", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_roles_role_id"), "user_roles", ["role_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_roles_organization_id"),
        "user_roles",
        ["organization_id"],
        unique=False,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop RBAC tables in reverse order
    op.drop_index(op.f("ix_user_roles_organization_id"), table_name="user_roles")
    op.drop_index(op.f("ix_user_roles_role_id"), table_name="user_roles")
    op.drop_index(op.f("ix_user_roles_user_id"), table_name="user_roles")
    op.drop_table("user_roles")

    op.drop_table("role_permissions")

    op.drop_index(op.f("ix_permissions_resource"), table_name="permissions")
    op.drop_index(op.f("ix_permissions_name"), table_name="permissions")
    op.drop_table("permissions")

    op.drop_index(op.f("ix_roles_name"), table_name="roles")
    op.drop_table("roles")

    # Drop API Keys table
    op.drop_index(op.f("ix_api_keys_site_id"), table_name="api_keys")
    op.drop_index(op.f("ix_api_keys_user_id"), table_name="api_keys")
    op.drop_index(op.f("ix_api_keys_key_hash"), table_name="api_keys")
    op.drop_table("api_keys")

    # Reverse other changes
    op.create_unique_constraint(
        op.f("sites_site_uuid_key"),
        "sites",
        ["site_uuid"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(
        op.f("ix_sites_security_score"), "sites", ["security_score"], unique=False
    )
    op.create_index(
        op.f("ix_sites_last_drupal_org_check"),
        "sites",
        ["last_drupal_org_check"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sites_last_data_push"), "sites", ["last_data_push"], unique=False
    )
    op.drop_constraint(None, "organizations", type_="foreignkey")
    op.drop_constraint(None, "organizations", type_="foreignkey")
    op.create_unique_constraint(
        op.f("modules_machine_name_key"),
        "modules",
        ["machine_name"],
    )
    op.alter_column(
        "module_versions",
        "release_notes",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "module_versions",
        "is_security_update",
        existing_type=sa.BOOLEAN(),
        nullable=True,
    )
    # ### end Alembic commands ###
