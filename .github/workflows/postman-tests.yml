name: Postman Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create environment file
        run: |
          echo "POSTGRES_SERVER=db" > .env
          echo "POSTGRES_HOST=db" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_USER=appuser832jdsf" >> .env
          echo "POSTGRES_PASSWORD=app.password832jdsf" >> .env
          echo "POSTGRES_DB=postgres" >> .env
          echo "JWT_SECRET_KEY=vka6tYama.FYAMUqjQYNzXtqCs7ZeibGHN_nxEqNtEkwQ*aPnvcRT_oowuuKw-zjXdHWqbZVd4A_hGXukU6DgztzZcjZ9FwydZ-4" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
          echo "BACKEND_CORS_ORIGINS=[\"*\"]" >> .env
          echo "VERSION=1.0.0" >> .env
          echo "SUPERUSER_EMAIL=admin@example.com" >> .env
          echo "SUPERUSER_PASSWORD=admin123" >> .env

      - name: Start services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d

      - name: Show Docker resource usage
        run: docker stats --no-stream

      - name: Wait for database to be ready
        run: |
          timeout 60 bash -c 'until docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T db pg_isready -U appuser832jdsf; do echo "Waiting for database..."; sleep 2; done'

      - name: Create application database
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T db psql -U appuser832jdsf -d postgres -c "DROP DATABASE IF EXISTS application_db;"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T db psql -U appuser832jdsf -d postgres -c "CREATE DATABASE application_db;"

      - name: Run database migrations
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T api alembic upgrade head

      - name: Create superuser
        run: |
          # Use the existing script instead of inline code
          docker compose -f docker-compose.yml -f docker-compose.ci.yml exec -T api python scripts/ensure_superuser.py

      - name: Wait for API to be healthy
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for API..."; sleep 2; done'

      - name: Install Newman
        run: npm install -g newman
        
      - name: Run Postman Collection
        run: newman run "postman/FastAPI_Monitoring_Updated.postman_collection.json" -e postman/FastAPI_Testing_Environment.postman_environment.json
